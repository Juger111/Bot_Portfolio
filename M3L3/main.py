# main.py
import os
from telebot import TeleBot, types
from telebot.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)

from logic import DB_Manager
from config import TOKEN, DATABASE

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
bot = TeleBot(TOKEN)
manager = DB_Manager(DATABASE)
os.makedirs("project_photos", exist_ok=True)

hide_board = types.ReplyKeyboardRemove()
cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========

def cancel(message):
    """–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å /info."""
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π: /info",
        reply_markup=hide_board
    )

def no_projects(message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç."""
    bot.send_message(
        message.chat.id,
        "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–î–æ–±–∞–≤—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /new_project"
    )

def gen_reply_markup(options: list[str]) -> ReplyKeyboardMarkup:
    """
    Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
    - one_time_keyboard=True ‚Üí –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    - resize_keyboard=True ‚Üí –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    """
    markup = ReplyKeyboardMarkup(
        one_time_keyboard=True,
        resize_keyboard=True
    )
    for o in options:
        markup.add(KeyboardButton(o))
    markup.add(KeyboardButton(cancel_button))
    return markup

def gen_inline_markup(options: list[str]) -> InlineKeyboardMarkup:
    """Inline-–∫–Ω–æ–ø–∫–∏ (–¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤)."""
    markup = InlineKeyboardMarkup(row_width=1)
    for o in options:
        markup.add(InlineKeyboardButton(o, callback_data=o))
    return markup

# –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
attributes = {
    '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞':    ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞:",   "project_name"),
    '–û–ø–∏—Å–∞–Ω–∏–µ':       ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",      "description"),
    '–°—Å—ã–ª–∫–∞':         ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:",         "url"),
    '–°—Ç–∞—Ç—É—Å':         ("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",        "status_id"),
}

# ========== –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ ==========
def info_project(message, user_id: int, project_name: str):
    rec = manager.get_project_info(user_id, project_name)
    if not rec:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    name, desc, url, status = rec[0]
    skills = manager.get_project_skills(project_name) or "‚Äî"
    photo = manager.get_project_photo(project_name, user_id)

    text = (
        f"üìÅ <b>{name}</b>\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc or '‚Äî'}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {url or '‚Äî'}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {skills}"
    )
    bot.send_message(
        message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=hide_board
    )

    if photo:
        with open(f"project_photos/{photo}", "rb") as f:
            bot.send_photo(message.chat.id, f)

# ========== –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ==========

@bot.message_handler(commands=['start'])
def start_handler(message):
    """–ó–∞–ø—É—Å–∫ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞."""
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ü§ñ\n"
        "–°–æ—Ö—Ä–∞–Ω—è–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã!"
    )
    info_handler(message)

@bot.message_handler(commands=['info'])
def info_handler(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º."""
    bot.send_message(
        message.chat.id,
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/new_project ‚Äì —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç üÜï\n"
        "/projects ‚Äì —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ üìã\n"
        "/skills ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫ üõ†Ô∏è\n"
        "/update_projects ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ‚úèÔ∏è\n"
        "/delete ‚Äì —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ‚ùå\n"
        "/add_description ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ üìÑ\n"
        "/add_photo ‚Äì –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ üì∑\n"
        "/info ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É ‚ÑπÔ∏è",
        parse_mode='HTML'
    )

# ----- /new_project -----
@bot.message_handler(commands=['new_project'])
def new_project_step1(message):
    bot.send_message(message.chat.id, "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, new_project_step2)

def new_project_step2(message):
    name = message.text.strip()
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
    bot.register_next_step_handler(message, new_project_step3, user_id, name)

def new_project_step3(message, user_id, name):
    url = message.text.strip()
    statuses = [s[0] for s in manager.get_statuses()]
    bot.send_message(
        message.chat.id,
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=gen_reply_markup(statuses)
    )
    bot.register_next_step_handler(
        message, new_project_step4, user_id, name, url, statuses
    )

def new_project_step4(message, user_id, name, url, statuses):
    choice = message.text
    if choice == cancel_button:
        return cancel(message)
    if choice not in statuses:
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=gen_reply_markup(statuses)
        )
        return bot.register_next_step_handler(
            message, new_project_step4, user_id, name, url, statuses
        )
    status_id = manager.get_status_id(choice)
    manager.insert_project([(user_id, name, url, status_id)])
    bot.send_message(
        message.chat.id,
        "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=hide_board
    )

# ----- /projects -----
@bot.message_handler(commands=['projects'])
def projects_handler(message):
    user_id = message.from_user.id
    projs = manager.get_projects(user_id)
    if not projs:
        return no_projects(message)

    names = [p[2] for p in projs]
    text = ""
    for _, _, pname, _, url, _ in projs:
        text += f"üìÅ <b>{pname}</b>\nüîó {url or '‚Äî'}\n\n"
    bot.send_message(
        message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=gen_inline_markup(names)
    )

@bot.callback_query_handler(func=lambda call: True)
def project_inline_callback(call):
    info_project(call.message, call.from_user.id, call.data)

# ----- /skills -----
@bot.message_handler(commands=['skills'])
def skills_handler(message):
    user_id = message.from_user.id
    projs = manager.get_projects(user_id)
    if not projs:
        return no_projects(message)

    names = [p[2] for p in projs]
    bot.send_message(
        message.chat.id,
        "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:",
        reply_markup=gen_reply_markup(names)
    )
    bot.register_next_step_handler(message, skills_step2, names)

def skills_step2(message, names):
    proj = message.text
    if proj == cancel_button:
        return cancel(message)
    if proj not in names:
        bot.send_message(
            message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(names)
        )
        return bot.register_next_step_handler(message, skills_step2, names)

    all_skills = [s[1] for s in manager.get_skills()]
    bot.send_message(
        message.chat.id,
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫:",
        reply_markup=gen_reply_markup(all_skills)
    )
    bot.register_next_step_handler(message, skills_step3, proj, all_skills)

def skills_step3(message, proj, all_skills):
    choice = message.text
    uid = message.from_user.id
    if choice == cancel_button:
        return cancel(message)
    if choice not in all_skills:
        bot.send_message(
            message.chat.id, "‚ùå –ù–∞–≤—ã–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(all_skills)
        )
        return bot.register_next_step_handler(message, skills_step3, proj, all_skills)

    manager.insert_skill(uid, proj, choice)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ù–∞–≤—ã–∫ ¬´{choice}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ ¬´{proj}¬ª.",
        reply_markup=hide_board
    )

# ----- /delete -----
@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    projs = manager.get_projects(user_id)
    if not projs:
        return no_projects(message)

    names = [p[2] for p in projs]
    bot.send_message(
        message.chat.id,
        "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=gen_reply_markup(names)
    )
    bot.register_next_step_handler(message, delete_step2, names)

def delete_step2(message, names):
    choice = message.text
    uid = message.from_user.id
    if choice == cancel_button:
        return cancel(message)
    if choice not in names:
        bot.send_message(
            message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(names)
        )
        return bot.register_next_step_handler(message, delete_step2, names)

    pid = manager.get_project_id(choice, uid)
    manager.delete_project(uid, pid)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç ¬´{choice}¬ª —É–¥–∞–ª—ë–Ω.",
        reply_markup=hide_board
    )

# ----- /update_projects -----
@bot.message_handler(commands=['update_projects'])
def upd_handler1(message):
    user_id = message.from_user.id
    projs = manager.get_projects(user_id)
    if not projs:
        return no_projects(message)

    names = [p[2] for p in projs]
    bot.send_message(
        message.chat.id,
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=gen_reply_markup(names)
    )
    bot.register_next_step_handler(message, upd_handler2, names)

def upd_handler2(message, names):
    proj = message.text
    if proj == cancel_button:
        return cancel(message)
    if proj not in names:
        bot.send_message(
            message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(names)
        )
        return bot.register_next_step_handler(message, upd_handler2, names)

    opts = list(attributes.keys())
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=gen_reply_markup(opts)
    )
    bot.register_next_step_handler(message, upd_handler3, proj)

def upd_handler3(message, proj):
    choice = message.text
    if choice == cancel_button:
        return cancel(message)
    if choice not in attributes:
        bot.send_message(
            message.chat.id, "‚ùå –û–ø—Ü–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(list(attributes.keys()))
        )
        return bot.register_next_step_handler(message, upd_handler3, proj)

    prompt, col = attributes[choice]
    markup = None
    if col == "status_id":
        statuses = [s[0] for s in manager.get_statuses()]
        markup = gen_reply_markup(statuses)

    bot.send_message(
        message.chat.id,
        prompt,
        reply_markup=markup or hide_board
    )
    bot.register_next_step_handler(message, upd_handler4, proj, col)

def upd_handler4(message, proj, col):
    val = message.text
    uid = message.from_user.id
    if val == cancel_button:
        return cancel(message)

    # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ id
    if col == "status_id":
        sts = [s[0] for s in manager.get_statuses()]
        if val not in sts:
            bot.send_message(
                message.chat.id,
                "‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ–≤–µ—Ä–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=gen_reply_markup(sts)
            )
            return bot.register_next_step_handler(message, upd_handler4, proj, col)
        val = manager.get_status_id(val)

    manager.update_projects(col, (val, proj, uid))
    bot.send_message(
        message.chat.id,
        "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=hide_board
    )

# ----- /add_description -----
@bot.message_handler(commands=['add_description'])
def add_desc1(message):
    uid = message.from_user.id
    projs = manager.get_projects(uid)
    if not projs:
        return no_projects(message)

    names = [p[2] for p in projs]
    bot.send_message(
        message.chat.id,
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=gen_reply_markup(names)
    )
    bot.register_next_step_handler(message, add_desc2, names)

def add_desc2(message, names):
    proj = message.text
    if proj == cancel_button:
        return cancel(message)
    if proj not in names:
        bot.send_message(
            message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(names)
        )
        return bot.register_next_step_handler(message, add_desc2, names)

    bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=hide_board
    )
    bot.register_next_step_handler(message, add_desc3, proj)

def add_desc3(message, proj):
    text = message.text
    uid = message.from_user.id
    manager.update_projects("description", (text, proj, uid))
    bot.send_message(
        message.chat.id,
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        reply_markup=hide_board
    )

# ----- /add_photo -----
@bot.message_handler(commands=['add_photo'])
def add_photo1(message):
    uid = message.from_user.id
    projs = manager.get_projects(uid)
    if not projs:
        return no_projects(message)

    names = [p[2] for p in projs]
    bot.send_message(
        message.chat.id,
        "üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ñ–æ—Ç–æ:",
        reply_markup=gen_reply_markup(names)
    )
    bot.register_next_step_handler(message, add_photo2, names)

def add_photo2(message, names):
    proj = message.text
    if proj == cancel_button:
        return cancel(message)
    if proj not in names:
        bot.send_message(
            message.chat.id, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:",
            reply_markup=gen_reply_markup(names)
        )
        return bot.register_next_step_handler(message, add_photo2, names)

    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=hide_board
    )
    bot.register_next_step_handler(message, add_photo3, proj)

def add_photo3(message, proj):
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return bot.register_next_step_handler(message, add_photo3, proj)

    uid = message.from_user.id
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    data = bot.download_file(file_info.file_path)

    filename = f"{uid}_{proj}.jpg"
    path = f"project_photos/{filename}"
    with open(path, 'wb') as f:
        f.write(data)

    manager.update_projects("photo", (filename, proj, uid))
    bot.send_message(
        message.chat.id,
        "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        reply_markup=hide_board
    )

# ----- –õ–æ–≤–∏–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ -----
@bot.message_handler(func=lambda m: True)
def fallback_handler(message):
    uid = message.from_user.id
    names = [p[2] for p in manager.get_projects(uid)]
    if message.text in names:
        return info_project(message, uid, message.text)
    bot.reply_to(message, "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info_handler(message)

# ========== –°—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞ ==========
if __name__ == '__main__':
    bot.infinity_polling()
